{"version":3,"file":"static/js/1559.ab6984e9.chunk.js","mappings":"0SAce,SAASA,IACtB,IAAMC,GAAeC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,KAAKH,YAAY,IAC7DI,GAAQH,EAAAA,EAAAA,IAAYI,EAAAA,IAC1BC,GAAwCC,EAAAA,EAAAA,UAASH,GAAMI,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAC9BI,GAAWC,EAAAA,EAAAA,MAEXC,EAAmB,SAACC,GAIxB,GAHAJ,EAAgBI,EAAMC,OAAOC,OAC7BL,GAASM,EAAAA,EAAAA,IAAYH,EAAMC,OAAOC,SAE7BjB,EAAamB,aAAaC,SAAS,6BAAsD,SAAvBL,EAAMC,OAAOC,MAAkB,CACpG,IAAME,GAAYE,EAAAA,EAAAA,GAAOrB,EAAamB,cACtCA,EAAaG,KAAK,4BAClB,IAAMC,EAAc,CAAEJ,aAAAA,IACtBK,EAAAA,EAAAA,IAAexB,EAAayB,IAAKF,GAC9BG,MAAK,SAAAC,GAAe,IAAZC,EAAID,EAAJC,KACPhB,GAASiB,EAAAA,EAAAA,IAAaD,EAAKA,OAC3B,IAAME,EAAmB,CACvBC,UAAW/B,EAAayB,IACxBO,KAAM,uBACNC,cAAe,6BAEjBC,EAAAA,EAAAA,IAAmBJ,GAChBJ,MAAK,SAACE,GAAI,OAAKO,QAAQC,IAAI,QAAQ,IACnCC,OAAM,SAACC,GAAK,OAAKH,QAAQG,MAAMA,EAAMC,QAAQ,IAEhDC,EAAAA,GAAMC,QAAO,SAACC,GAAC,OACbC,EAAAA,EAAAA,KAACC,EAAAA,EAAgB,CAACZ,KAAMa,EAAAA,EAAiBC,qBAAuB,GAEpE,IACCT,OAAM,SAACC,GACNH,QAAQG,MAAM,uBAAwBA,EACxC,GACJ,CAEF,EAEA,OACES,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BC,SAAA,EACvCN,EAAAA,EAAAA,KAACO,EAAAA,EAAI,CAAAD,UACHF,EAAAA,EAAAA,MAACG,EAAAA,EAAKC,MAAK,CAACC,UAAU,iBAAgBH,SAAA,EACpCN,EAAAA,EAAAA,KAACO,EAAAA,EAAKG,MAAK,CACTrB,KAAK,QACLsB,MAAM,YACNrC,MAAM,OACNsC,QAA0B,SAAjB7C,EACT8C,SAAU1C,EACV2C,GAAG,mBAELd,EAAAA,EAAAA,KAACO,EAAAA,EAAKG,MAAK,CACTrB,KAAK,QACLsB,MAAM,aACNrC,MAAM,QACNsC,QAA0B,UAAjB7C,EACT8C,SAAU1C,EACV2C,GAAG,yBAITV,EAAAA,EAAAA,MAAA,MAAIC,UAAU,OAAMC,SAAA,CAAC,gBACL,KACdF,EAAAA,EAAAA,MAAA,QAAMC,UAAU,kBAAiBC,SAAA,CAAEvC,EAAa,gBAIxD,C,qCCjDA,MAvBA,WACE,IAAMgD,GAAWC,EAAAA,EAAAA,MACjB,OACEZ,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EACjCF,EAAAA,EAAAA,MAAA,MAAIC,UAAU,gDAA+CC,SAAA,EAC3DN,EAAAA,EAAAA,KAACiB,EAAAA,EAAM,CACLZ,UAAU,iDACVa,QAAS,kBAAMH,GAAU,EAAE,EAACT,UAE5BN,EAAAA,EAAAA,KAACmB,EAAAA,IAAW,CAACC,KAAM,OACZ,qBAGXhB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gDAA+CC,SAAA,EAC5DN,EAAAA,EAAAA,KAAA,QAAMK,UAAU,sBAAqBC,SAAC,mEAGtCN,EAAAA,EAAAA,KAAC5C,EAAc,SAIvB,C","sources":["pages/StartUp/UserSettings/SettingsPages/DarkModeSetting/Components/DarkModeToggle/DarkModeToggle.jsx","pages/StartUp/UserSettings/SettingsPages/DarkModeSetting/DarkModeSetting.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./DarkModeToggle.scss\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  selectTheme,\r\n  toggleTheme,\r\n} from \"../../../../../../../Store/features/design/designSlice\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { updateUserById, addNotificationAPI } from \"../../../../../../../Service/user\";\r\nimport { loginSuccess } from \"../../../../../../../Store/features/user/userSlice\";\r\nimport toast from \"react-hot-toast\";\r\nimport AchievementToast from \"../../../../../../../components/Toasts/AchievementToast/AchievementToast\";\r\nimport { achievementTypes } from \"../../../../../../../components/Toasts/AchievementToast/types\";\r\n\r\nexport default function DarkModeToggle() {\r\n  const loggedInUser = useSelector((state) => state.user.loggedInUser);\r\n  const theme = useSelector(selectTheme);\r\n  const [selectedMode, setSelectedMode] = useState(theme);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleModeChange = (event) => {\r\n    setSelectedMode(event.target.value);\r\n    dispatch(toggleTheme(event.target.value));\r\n\r\n    if (!loggedInUser.achievements.includes(\"658bb96e8a18edb75e6f423f\") && event.target.value === 'dark') {\r\n      const achievements = [...loggedInUser.achievements];\r\n      achievements.push(\"658bb96e8a18edb75e6f423f\");\r\n      const updatedData = { achievements };\r\n      updateUserById(loggedInUser._id, updatedData)\r\n        .then(({ data }) => {\r\n          dispatch(loginSuccess(data.data));\r\n          const notificationBody = {\r\n            recipient: loggedInUser._id,\r\n            type: \"achievementCompleted\",\r\n            achievementId: \"658bb96e8a18edb75e6f423f\",\r\n          };\r\n          addNotificationAPI(notificationBody)\r\n            .then((data) => console.log(\"Added\"))\r\n            .catch((error) => console.error(error.message));\r\n\r\n          toast.custom((t) => (\r\n            <AchievementToast type={achievementTypes.fallIntoTheDarkSide} />\r\n          ));\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error updating user:\", error);\r\n        });\r\n    }\r\n\r\n  };\r\n\r\n  return (\r\n    <div className=\"dark-mode-toggle-wrapper\">\r\n      <Form>\r\n        <Form.Group controlId=\"darkModeToggle\">\r\n          <Form.Check\r\n            type=\"radio\"\r\n            label=\"Dark mode\"\r\n            value=\"dark\"\r\n            checked={selectedMode === \"dark\"}\r\n            onChange={handleModeChange}\r\n            id=\"darkModeRadio\"\r\n          />\r\n          <Form.Check\r\n            type=\"radio\"\r\n            label=\"Light mode\"\r\n            value=\"light\"\r\n            checked={selectedMode === \"light\"}\r\n            onChange={handleModeChange}\r\n            id=\"lightModeRadio\"\r\n          />\r\n        </Form.Group>\r\n      </Form>\r\n      <h6 className=\"mt-3\">\r\n        Current mode:{\" \"}\r\n        <span className=\"text-capitalize\">{selectedMode} mode</span>\r\n      </h6>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./DarkModeSetting.scss\";\r\nimport DarkModeToggle from \"./Components/DarkModeToggle/DarkModeToggle\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { FaArrowLeft } from \"react-icons/fa\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nfunction DarkModeSetting() {\r\n  const navigate = useNavigate();\r\n  return (\r\n    <div className=\"dark-mode-settings\">\r\n      <h4 className=\"m-0 px-3 py-3 d-flex align-items-center gap-2\">\r\n        <Button\r\n          className=\"back-button btn-sm  rounded-circle border-none\"\r\n          onClick={() => navigate(-1)}\r\n        >\r\n          <FaArrowLeft size={25} />\r\n        </Button>\r\n        Choose a theme\r\n      </h4>\r\n      <div className=\"border-top px-3 py-3 d-flex flex-column gap-2\">\r\n        <span className=\"fs-6 text-secondary\">\r\n          Choose how your Capital hub experience looks for this device.\r\n        </span>\r\n        <DarkModeToggle />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DarkModeSetting;\r\n"],"names":["DarkModeToggle","loggedInUser","useSelector","state","user","theme","selectTheme","_useState","useState","_useState2","_slicedToArray","selectedMode","setSelectedMode","dispatch","useDispatch","handleModeChange","event","target","value","toggleTheme","achievements","includes","_toConsumableArray","push","updatedData","updateUserById","_id","then","_ref","data","loginSuccess","notificationBody","recipient","type","achievementId","addNotificationAPI","console","log","catch","error","message","toast","custom","t","_jsx","AchievementToast","achievementTypes","fallIntoTheDarkSide","_jsxs","className","children","Form","Group","controlId","Check","label","checked","onChange","id","navigate","useNavigate","Button","onClick","FaArrowLeft","size"],"sourceRoot":""}